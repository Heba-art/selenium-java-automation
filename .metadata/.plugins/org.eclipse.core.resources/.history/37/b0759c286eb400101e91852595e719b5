
package com.mycompany.selenium_automation_project;


import java.time.Duration;
import java.util.List;
import java.util.NoSuchElementException;

import org.openqa.selenium.By;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.mycompany.selenium_automation_project.base.BasePage;

import io.netty.handler.timeout.TimeoutException;

public class CartPage extends BasePage {

	
	private final By title= By.className("title"); // "Your Cart"

	
	private final By checkoutBtn = By.id("checkout");
	private final By continueShoppingBtn = By.id("continue-shopping");
	
	public CartPage(WebDriver driver) {
        super(driver);
    }
	
	public void waitUntilLoaded() {
        wait.until(ExpectedConditions.urlContains("/cart.html"));
        wait.until(ExpectedConditions.textToBePresentInElementLocated(title, "Your Cart"));
    }
    public boolean isLoaded() {
    	return driver.findElement(title).getText().trim().equalsIgnoreCase("Your Cart");	
    }
    
 // The cart description that contains the desired product name
    private By cartItemRowByName(String name) {
        return By.xpath("//div[@class='cart_item' and .//div[@class='inventory_item_name' and normalize-space()='" + name + "']]");
    }
	
    public boolean isProductInCart(String name) {
        return !driver.findElements(cartItemRowByName(name)).isEmpty();
    }
 
    public void removeProductFromCart(String productName) {
        By rowLocator = By.xpath("//div[@class='cart_item' and " +
                ".//div[@class='inventory_item_name' and normalize-space()='" + productName + "']]");
        By removeInRow = By.cssSelector("button[id^='remove-'], button[data-test^='remove-'], button.cart_button");

        for (int attempt = 0; attempt < 3; attempt++) {
            WebElement row = wait.until(ExpectedConditions.visibilityOfElementLocated(rowLocator));
            WebElement removeBtn = row.findElement(removeInRow);

            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", removeBtn);

            try {
                wait.until(ExpectedConditions.elementToBeClickable(removeBtn)).click();
            } catch (Exception e) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", removeBtn);
            }

            //  New logic: wait until button text changes to "Add to cart"
            try {
                WebDriverWait shortWait = new WebDriverWait(driver, Duration.ofSeconds(6));
                shortWait.until(ExpectedConditions.or(
                        ExpectedConditions.textToBePresentInElement(removeBtn, "Add to cart"),
                        ExpectedConditions.attributeToBe(removeBtn, "data-test", "add-to-cart-" + productName.toLowerCase().replace(" ", "-"))
                ));
                break; // success
            } catch (TimeoutException ignore) {
            	 // retry once or twice if needed
            }
        }

        // Optional final check: badge disappears (if test depends on it)
        try {
            By badge = By.cssSelector(".shopping_cart_badge");
            new WebDriverWait(driver, Duration.ofSeconds(5)).until(ExpectedConditions.or(
                    ExpectedConditions.numberOfElementsToBe(badge, 0),
                    ExpectedConditions.invisibilityOfElementLocated(badge)
            ));
        } catch (TimeoutException ignored) {}
    }


    public CheckoutPage clickCheckout() {
    	wait.until(ExpectedConditions.elementToBeClickable(checkoutBtn)).click();
    	CheckoutPage checkout = new CheckoutPage (driver, wait);
    	checkout.waitUntilInfoLoaded();
        return checkout;
    }
    public ProductsPage clickContinueShopping() {
    wait.until(ExpectedConditions.elementToBeClickable(continueShoppingBtn)).click();
    ProductsPage products = new ProductsPage(driver);
    products.waitUntilLoaded();
    return products;
    }
}

 

