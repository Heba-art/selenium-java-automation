package com.mycompany.selenium_automation_project.tests;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.mycompany.selenium_automation_project.CartPage;
import com.mycompany.selenium_automation_project.CheckoutPage;
import com.mycompany.selenium_automation_project.LoginPage;
import com.mycompany.selenium_automation_project.ProductsPage;
import com.mycompany.selenium_automation_project.base.BaseTest;

import io.qameta.allure.Description;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import io.qameta.allure.Story;

public class SauceDemoCheckoutTest extends BaseTest{

	@Epic("SauceDemo Automation")
	@Feature("Checkout")
	@Story("Complete checkout process successfully")
	@Severity(SeverityLevel.CRITICAL)
	@Owner("Heba AL-Rubaye")
	@Description("Verify that a user can complete the full checkout process from cart to the 'Checkout: Complete!' page.")
	@Test(priority = 6)
	
    public void TC_SD_006_completeCheckoutFlow() {
		
		final String product= "Sauce Labs Backpack";
		 // Login
		LoginPage login = new LoginPage (driver);
		login.open(baseUrl);
		login.login("standard_user", "secret_sauce");

		 // Add 1 product
		ProductsPage products = new ProductsPage (driver);
		products.waitUntilLoaded();
		products.addProductToCart(product);
		Assert.assertEquals(products.getCartBadgeText(), "1", "Badge should be 1");
		
		 // Go to Cart & assert item exists
		CartPage cart = products.openCart();
		Assert.assertTrue(cart.isLoaded(), "Cart should load");
		Assert.assertTrue(cart.isProductInCart(product),"Item must exist before checkout");
		
		By checkoutBtn = By.cssSelector("[data-test='checkout']");
	    clickWithRetry(checkoutBtn);
	    new WebDriverWait(driver, Duration.ofSeconds(12))
	            .until(ExpectedConditions.urlContains("/checkout-step-one.html"));
	    new WebDriverWait(driver, Duration.ofSeconds(8))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("[data-test='firstName']")));
	    
		  // Checkout flow
		CheckoutPage checkout =cart.clickCheckout();
		checkout.fillInfo("Heba", "QA", "3000");
		checkout.waitUntilOverviewLoaded();
		checkout.finish();
		checkout.waitUntilCompleteLoaded();
		
		By contBtn = By.cssSelector("[data-test='continue']");
	    clickWithRetry(contBtn);
	    new WebDriverWait(driver, Duration.ofSeconds(12))
	            .until(ExpectedConditions.urlContains("/checkout-step-two.html"));
	    new WebDriverWait(driver, Duration.ofSeconds(8))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".summary_info")));
		
		// Verify Complete page
		Assert.assertTrue(checkout.isComplete(), "Should be on 'Checkout: Complete!' page");
	
		By finishBtn = By.cssSelector("[data-test='finish']");
	    clickWithRetry(finishBtn);
	    new WebDriverWait(driver, Duration.ofSeconds(12))
	            .until(ExpectedConditions.urlContains("/checkout-complete.html"));
	    new WebDriverWait(driver, Duration.ofSeconds(8))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".complete-header")));
	
	    // 8️⃣ Final assertion
	    String successMsg = driver.findElement(By.cssSelector(".complete-header")).getText();
	    Assert.assertEquals(successMsg, "Thank you for your order!");
	}

}
