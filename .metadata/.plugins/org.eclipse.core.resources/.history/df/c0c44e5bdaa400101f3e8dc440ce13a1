
package com.mycompany.selenium_automation_project;


import java.util.List;
import java.util.NoSuchElementException;

import org.openqa.selenium.By;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.mycompany.selenium_automation_project.base.BasePage;

import io.netty.handler.timeout.TimeoutException;

public class CartPage extends BasePage {

	
	private final By title= By.className("title"); // "Your Cart"

	
	private final By checkoutBtn = By.id("checkout");
	private final By continueShoppingBtn = By.id("continue-shopping");
	
	public CartPage(WebDriver driver) {
        super(driver);
    }
	
	public void waitUntilLoaded() {
        wait.until(ExpectedConditions.urlContains("/cart.html"));
        wait.until(ExpectedConditions.textToBePresentInElementLocated(title, "Your Cart"));
    }
    public boolean isLoaded() {
    	return driver.findElement(title).getText().trim().equalsIgnoreCase("Your Cart");	
    }
    
 // The cart description that contains the desired product name
    private By cartItemRowByName(String name) {
        return By.xpath("//div[@class='cart_item' and .//div[@class='inventory_item_name' and normalize-space()='" + name + "']]");
    }
	
    public boolean isProductInCart(String name) {
        return !driver.findElements(cartItemRowByName(name)).isEmpty();
    }
 
    public void removeProductFromCart(String productName) {
        // Row that contains the specific product name
        By rowLocator = By.xpath("//div[@class='cart_item' and " +
                ".//div[@class='inventory_item_name' and normalize-space()='" + productName + "']]");

        // Remove button INSIDE the row (covers id / data-test / old .cart_button)
        By removeInRow = By.cssSelector("button[id^='remove-'], button[data-test^='remove-'], button.cart_button");

        // Try up to 3 times in case the first click is ignored
        for (int attempt = 0; attempt < 3; attempt++) {
            // 1) Wait for the row to be visible
            WebElement row = wait.until(ExpectedConditions.visibilityOfElementLocated(rowLocator));

            // 2) Find the remove button inside the same row
            WebElement removeBtn = row.findElement(removeInRow);

            // 3) Scroll into view (headless/CI)
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", removeBtn);

            // 4) Click safely (normal -> JS fallback)
            try {
                wait.until(ExpectedConditions.elementToBeClickable(removeBtn)).click();
            } catch (Exception e) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", removeBtn);
            }

            // 5) Short confirmation wait: row gone / invisible / count decreased
            boolean gone = false;
            try {
                WebDriverWait shortWait = new WebDriverWait(driver, Duration.ofSeconds(3));
                shortWait.until(ExpectedConditions.or(
                        ExpectedConditions.stalenessOf(row),
                        ExpectedConditions.invisibilityOfElementLocated(rowLocator),
                        ExpectedConditions.numberOfElementsToBe(rowLocator, 0)
                ));
                gone = true;
            } catch (TimeoutException ignore) {
                // will retry
            }

            if (gone) break; // success
        }

        // 6) Final mandatory wait: row must be gone
        wait.until(ExpectedConditions.numberOfElementsToBe(rowLocator, 0));
    }

    public CheckoutPage clickCheckout() {
    	wait.until(ExpectedConditions.elementToBeClickable(checkoutBtn)).click();
    	CheckoutPage checkout = new CheckoutPage (driver, wait);
    	checkout.waitUntilInfoLoaded();
        return checkout;
    }
    public ProductsPage clickContinueShopping() {
    wait.until(ExpectedConditions.elementToBeClickable(continueShoppingBtn)).click();
    ProductsPage products = new ProductsPage(driver);
    products.waitUntilLoaded();
    return products;
    }
}

 

