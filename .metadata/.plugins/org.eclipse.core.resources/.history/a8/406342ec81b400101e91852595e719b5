package com.mycompany.selenium_automation_project.tests;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.mycompany.selenium_automation_project.CartPage;
import com.mycompany.selenium_automation_project.CheckoutPage;
import com.mycompany.selenium_automation_project.LoginPage;
import com.mycompany.selenium_automation_project.ProductsPage;
import com.mycompany.selenium_automation_project.base.BaseTest;

import io.qameta.allure.Description;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import io.qameta.allure.Story;

public class SauceDemoCheckoutNegativeTest extends BaseTest {

	private void seedCartWithOneItem(String product) {
	LoginPage login = new LoginPage (driver);
	login.open(baseUrl);
	login.login("standard_user", "secret_sauce");
	
	ProductsPage products = new ProductsPage(driver);
	products.waitUntilLoaded();
	products.addProductToCart(product);
	Assert.assertEquals(products.getCartBadgeText(), "1", "Badge should be 1");
	
	CartPage cart= products.openCart();
	Assert.assertTrue(cart.isLoaded(),"Cart should load");
	Assert.assertTrue(cart.isProductInCart(product), "Item must exist before checkout");
    }
	
	@Epic("SauceDemo Automation")
	@Feature("Checkout")
	@Story("Negative checkout: missing required field")
	@Severity(SeverityLevel.NORMAL)
	@Owner("Heba AL-Rubaye")
	@Description("Verify that leaving the 'First Name' field empty during checkout displays an appropriate validation error and prevents continuation.")
	@Test(priority = 6)
	
    public void TC_SD_006_Negative_missingFirstName_showsError() {
		LoginPage login = new LoginPage(driver);
	    login.open(baseUrl);
	    login.login("standard_user", "secret_sauce");

	    ProductsPage products = new ProductsPage(driver);
	    products.waitUntilLoaded();
	    products.addProductToCart("Sauce Labs Backpack");

	    CartPage cart = products.openCart();
	    By checkoutBtn = By.cssSelector("[data-test='checkout']");
	    clickWithRetry(checkoutBtn);

	    new WebDriverWait(driver, Duration.ofSeconds(10))
	            .until(ExpectedConditions.urlContains("/checkout-step-one.html"));

	    // Leave first name blank
	    driver.findElement(By.cssSelector("[data-test='lastName']")).sendKeys("QA");
	    driver.findElement(By.cssSelector("[data-test='postalCode']")).sendKeys("12345");

	    // Click Continue
	    By contBtn = By.cssSelector("[data-test='continue']");
	    clickWithRetry(contBtn);

	    // Wait for error message
	    WebElement error = new WebDriverWait(driver, Duration.ofSeconds(10))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("[data-test='error']")));
	    Assert.assertTrue(error.getText().contains("Error"), "Error message not shown");
    }
	
	@Epic("SauceDemo Automation")
	@Feature("Checkout")
	@Story("Negative checkout: missing Last Name field")
	@Severity(SeverityLevel.NORMAL)
	@Owner("Heba AL-Rubaye")
	@Description("Verify that leaving the 'Last Name' field empty during checkout triggers the correct validation error message and prevents proceeding to the next step.")
	@Test(priority = 6)
	
    public void TC_SD_006_Negative_missingLastName_showsError() {
		LoginPage login = new LoginPage(driver);
	    login.open(baseUrl);
	    login.login("standard_user", "secret_sauce");

	    ProductsPage products = new ProductsPage(driver);
	    products.waitUntilLoaded();
	    products.addProductToCart("Sauce Labs Backpack");

	    CartPage cart = products.openCart();
	    By checkoutBtn = By.cssSelector("[data-test='checkout']");
	    clickWithRetry(checkoutBtn);

	    new WebDriverWait(driver, Duration.ofSeconds(20))
	            .until(ExpectedConditions.urlContains("/checkout-step-one.html"));

	    // Leave first name blank
	    driver.findElement(By.cssSelector("[data-test='firstName']")).sendKeys("Heba");
	    driver.findElement(By.cssSelector("[data-test='postalCode']")).sendKeys("12345");

	    // Click Continue
	    By contBtn = By.cssSelector("[data-test='continue']");
	    clickWithRetry(contBtn);

	    // Wait for error message
	    WebElement error = new WebDriverWait(driver, Duration.ofSeconds(20))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("[data-test='error']")));
	    Assert.assertTrue(error.getText().contains("Error"), "Error message not shown");
	}

	@Epic("SauceDemo Automation")
	@Feature("Checkout")
	@Story("Negative checkout: missing Postal Code field")
	@Severity(SeverityLevel.NORMAL)
	@Owner("Heba AL-Rubaye")
	@Description("Verify that leaving the 'Postal Code' field empty during checkout shows the correct validation error and prevents moving to the next step.")
	@Test(priority = 6)
	
    public void TC_SD_006_Negative_missingPostalCode_showsError() {
		LoginPage login = new LoginPage(driver);
	    login.open(baseUrl);
	    login.login("standard_user", "secret_sauce");

	    ProductsPage products = new ProductsPage(driver);
	    products.waitUntilLoaded();
	    products.addProductToCart("Sauce Labs Backpack");

	    CartPage cart = products.openCart();
	    clickWithRetry(By.cssSelector("[data-test='checkout']"));

	    new WebDriverWait(driver, Duration.ofSeconds(20))
	            .until(ExpectedConditions.urlContains("/checkout-step-one.html"));

	    // Leave postal code blank
	    driver.findElement(By.cssSelector("[data-test='firstName']")).sendKeys("Heba");
	    driver.findElement(By.cssSelector("[data-test='lastName']")).sendKeys("QA");

	    clickWithRetry(By.cssSelector("[data-test='continue']"));

	    WebElement error = new WebDriverWait(driver, Duration.ofSeconds(20))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("[data-test='error']")));
	    Assert.assertTrue(error.getText().contains("Postal Code"), "Expected Postal Code error message");
	}
			
	
}
