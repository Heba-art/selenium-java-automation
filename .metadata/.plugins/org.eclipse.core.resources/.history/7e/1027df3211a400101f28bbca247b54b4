
package com.mycompany.selenium_automation_project.tests;

import org.openqa.selenium.By;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;
import org.testng.annotations.Test;
import com.mycompany.selenium_automation_project.CartPage;
import com.mycompany.selenium_automation_project.LoginPage;
import com.mycompany.selenium_automation_project.ProductsPage;
import com.mycompany.selenium_automation_project.base.BaseTest;

import io.qameta.allure.Description;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import io.qameta.allure.Story;

public class SauceDemoAddToCartTest extends BaseTest {

	@Epic("SauceDemo Automation")
	@Feature("Cart")
	@Owner("Heba AL-Rubaye")
	@Severity(SeverityLevel.CRITICAL)
	@Description("Verify that adding a single item updates the cart badge and displays the item inside the cart.") 
	@Test(priority = 4)
    @Story("Add a single product to cart")
	
	public void TC_SD_004_addSingleItemToCart_shouldShowBadgeAndItemInCart() {
	    final String product = "Sauce Labs Backpack";

	    // 1) Login
	    LoginPage login = new LoginPage(driver);
	    login.open(baseUrl);
	    login.login("standard_user", "secret_sauce");

	    // 2) Products page ready
	    ProductsPage products = new ProductsPage(driver);
	    products.waitUntilLoaded();
	    Assert.assertTrue(products.isLoaded(), "Products page should be loaded after login.");

	    // 3) Add item (robust add with waits/scroll)
	    products.addProductToCart(product);
	    By removeBtn = By.id("remove-sauce-labs-backpack");
	    wait.until(ExpectedConditions.visibilityOfElementLocated(removeBtn));


	    // 4) Verify badge = 1
	    By badge = By.className("shopping_cart_badge");
	    wait.until(ExpectedConditions.visibilityOfElementLocated(badge));
	    Assert.assertEquals(products.getCartBadgeText(), "1", "Cart badge should be 1 after adding one item.");

	    // 5) Open cart and verify item exists
	    CartPage cart = products.openCart();
	    wait.until(ExpectedConditions.textToBePresentInElementLocated(By.className("title"), "Your Cart"));
	    Assert.assertTrue(cart.isProductInCart(product), "Cart should contain '" + product + "'.");
	}
	
	@Epic("SauceDemo Automation")
	@Feature("Cart")
	@Story("Remove item from cart")
	@Severity(SeverityLevel.NORMAL)
	@Owner("Heba Al-Rubaye")
	@Description("Verify that removing an item from the cart empties it and hides the cart badge from the header.")
	@Test(priority = 5) 
    public void TC_SD_005_removeItemFromCart_shouldEmptyCartAndHideBadge() {
        final String product = "Sauce Labs Backpack";

        // 1. Login
        LoginPage login = new LoginPage(driver);
        login.open(baseUrl);
        login.login("standard_user", "secret_sauce");

        // 2. Go to products page and add one item
        ProductsPage products = new ProductsPage(driver);
        products.waitUntilLoaded();
        products.addProductToCart(product); 
        Assert.assertEquals(products.getCartBadgeText(), "1", "Precondition failed");

        // 3. Open the cart page
        CartPage cart = products.openCart();
        Assert.assertTrue(cart.isProductInCart(product), "Precondition failed");
        cart.removeProductFromCart(product);

        // Verify
        Assert.assertFalse(cart.isProductInCart(product), "Item should be removed from cart");
        products.waitForBadgeToDisappear();
        String badge = products.getCartBadgeText();
        Assert.assertTrue(badge == null || badge.isEmpty(), "Cart badge should be empty after removal");


	
	}
	
}


	
	
	
