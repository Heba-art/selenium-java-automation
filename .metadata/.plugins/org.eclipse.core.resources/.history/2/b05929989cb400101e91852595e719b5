package com.mycompany.selenium_automation_project.base;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.qameta.allure.Allure;

public class BaseTest {
    protected WebDriver driver;
    protected WebDriverWait wait;
    protected String baseUrl;
    
    @BeforeMethod
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();

        Map<String, Object> prefs = new HashMap<>();
        prefs.put("credentials_enable_service", false);              //Stop password service
        prefs.put("profile.password_manager_enabled", false);        // Stop saving passwords
        prefs.put("profile.password_manager_leak_detection", false); // Stop leak warnings
        prefs.put("autofill.profile_enabled", false);                // stop Autofill
        prefs.put("autofill.credit_card_enabled", false);            // stop Autofill cards
        options.setExperimentalOption("prefs", prefs);

        // 2) additional
     // ✅ Always run Chrome in headless mode on GitHub Actions
        options.addArguments("--headless=new");

        // ✅ Prevent common GitHub container issues
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");

        // ✅ General stability and consistency settings
        options.addArguments("--disable-gpu");
        options.addArguments("--disable-notifications");
        options.addArguments("--disable-popup-blocking");
        options.addArguments("--window-size=1920,1080");

        // ✅ Create a unique temporary user data directory each run
        options.addArguments("--user-data-dir=/tmp/chrome-" + System.currentTimeMillis());

        // ✅ Prevent password/autofill popups
        options.setExperimentalOption("prefs", Map.of(
            "credentials_enable_service", false,
            "profile.password_manager_enabled", false
        ));

        // 3) Create a WebDriver with options only (once!)
        driver = new ChromeDriver(options);
        driver.manage().deleteAllCookies();

        // 4) WebDriverWait بالـ DEFAULT_TIMEOUT
        wait = new WebDriverWait(driver, Duration.ofSeconds(20));
    }
    
    

    @AfterMethod(alwaysRun = true)
    public void tearDown(ITestResult result) {
        if (driver != null) {
            try {
                if (result.getStatus() == ITestResult.FAILURE) {
                    attachScreenshot("❌ Failure Screenshot");
                    Allure.addAttachment("URL", driver.getCurrentUrl());
                }
            } finally {
                driver.quit();
            }
        }
    }
    
    @BeforeSuite(alwaysRun = true)
    public void writeAllureEnvironment() throws Exception {
        // Allure
        String dir = System.getProperty("allure.results.directory", "target/allure-results");
        Path resultsDir = Paths.get(dir);

        //create
        java.nio.file.Files.createDirectories(resultsDir);
        //  environment.properties
        Properties p = new Properties();
        p.setProperty("Tester", "Heba AL-Rubaye");
        p.setProperty("Environment", "QA");
        p.setProperty("BaseURL", "https://www.saucedemo.com");
        p.setProperty("Browser", "Chrome 128");
        p.setProperty("Execution Mode", "Headless");
        p.setProperty("Build", "GitHub Actions CI");
       
        File envFile = resultsDir.resolve("environment.properties").toFile();
        try (OutputStream out = new FileOutputStream(envFile)) {
            p.store(out, "Allure environment");
        }
    }
    private void attachScreenshot(String name) {
        byte[] png = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
        Allure.addAttachment(name, new ByteArrayInputStream(png));
    }

    public WebDriver getDriver() { return driver; } 
    
    static {
        System.setProperty("allure.results.directory", "target/allure-results");
    }
    
    public void clickWithRetry(By locator) {
        WebDriverWait localWait = new WebDriverWait(driver, Duration.ofSeconds(12));
        for (int i = 0; i < 3; i++) {
            try {
                WebElement el = localWait.until(ExpectedConditions.presenceOfElementLocated(locator));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", el);
                localWait.until(ExpectedConditions.elementToBeClickable(el));
                try {
                    el.click();
                } catch (Exception e) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].click();", el);
                }
                return; 
            } catch (Exception ignore) {
                try { Thread.sleep(300); } catch (InterruptedException ie) {}
            }
        }
        throw new TimeoutException("Failed to click: " + locator);
    }


}
