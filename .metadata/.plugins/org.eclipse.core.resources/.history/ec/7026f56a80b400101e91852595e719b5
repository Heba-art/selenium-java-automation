package com.mycompany.selenium_automation_project.tests;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.mycompany.selenium_automation_project.LoginPage;
import com.mycompany.selenium_automation_project.ProductsPage;
import com.mycompany.selenium_automation_project.base.BaseTest;

import io.qameta.allure.Description;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import io.qameta.allure.Story;

public class SauceDemoLogoutProtectionTest extends BaseTest{
	
	@Epic("SauceDemo Automation")
	@Feature("Security")
	@Story("Logout and access protection")
	@Severity(SeverityLevel.CRITICAL)
	@Owner("Heba Al-Rubaye")
	@Description("Verify that after logout, the user cannot access protected pages like inventory and is redirected back to the login page.")
	@Test(priority = 9)
	
    public void TC_SD_009_logoutAndAccessProtection() {

		LoginPage login = new LoginPage(driver);
	    login.open(baseUrl);
	    login.login("standard_user", "secret_sauce");

	    ProductsPage products = new ProductsPage(driver);
	    products.waitUntilLoaded();

	    // Logout
	    By menuBtn = By.id("react-burger-menu-btn");
	    clickWithRetry(menuBtn);
	    new WebDriverWait(driver, Duration.ofSeconds(5))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.id("logout_sidebar_link")));

	    By logoutLink = By.id("logout_sidebar_link");
	    clickWithRetry(logoutLink);

	    new WebDriverWait(driver, Duration.ofSeconds(15))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.id("user-name")));
	    Assert.assertTrue(login.isLoaded(), "Should be redirected to login");

	    driver.get(baseUrl + "inventory.html");
	    new WebDriverWait(driver, Duration.ofSeconds(10))
	            .until(ExpectedConditions.visibilityOfElementLocated(By.id("user-name")));
	    Assert.assertTrue(login.isLoaded(), "Inventory access blocked after logout");
	}
}
