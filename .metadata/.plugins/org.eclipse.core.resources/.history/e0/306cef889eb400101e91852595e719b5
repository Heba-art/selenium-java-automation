package com.mycompany.selenium_automation_project.base;

import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.time.Duration;

public class BasePage {

    protected WebDriver driver;
    protected WebDriverWait wait;

    // Constructor
    public BasePage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(30));
    }

    // Wait until element is visible
    protected WebElement waitVisible(By locator) {
        return wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
    }

    // Safe click (with scroll and JS fallback)
    protected void safeClick(WebElement element) {
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", element);
        try {
            wait.until(ExpectedConditions.elementToBeClickable(element)).click();
        } catch (Exception e) {
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
        }
    }

    // Click and wait until URL contains a specific text
    protected void clickAndWaitUrl(By locator, String partialUrl) {
        WebElement el = waitVisible(locator);
        safeClick(el);
        try {
            new WebDriverWait(driver, Duration.ofSeconds(5))
                    .until(ExpectedConditions.stalenessOf(el));
        } catch (Exception ignored) {}
        wait.until(ExpectedConditions.urlContains(partialUrl));
    }
    protected void waitReplaced(WebElement oldElement, By newLocator) {
        try {
            wait.until(ExpectedConditions.stalenessOf(oldElement));
        } catch (Exception ignored) { }
        wait.until(ExpectedConditions.visibilityOfElementLocated(newLocator));
    }

    public void clickWithRetry(By locator) {
        WebDriverWait localWait = new WebDriverWait(driver, Duration.ofSeconds(12));
        for (int i = 0; i < 3; i++) {
            try {
                WebElement el = localWait.until(ExpectedConditions.presenceOfElementLocated(locator));
                ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block:'center'});", el);
                localWait.until(ExpectedConditions.elementToBeClickable(el));
                try {
                    el.click();
                } catch (Exception e) {
                    ((JavascriptExecutor) driver).executeScript("arguments[0].click();", el);
                }
                return; 
            } catch (Exception ignore) {
                try { Thread.sleep(300); } catch (InterruptedException ie) {}
            }
        }
        throw new TimeoutException("Failed to click: " + locator);
    }
    public void robustClick(By selector) {
        try {
            // 1. انتظر حتى يصبح العنصر "قابلاً للنقر"
            WebElement element = new WebDriverWait(driver, Duration.ofSeconds(10))
                                    .until(ExpectedConditions.elementToBeClickable(selector));
            // 2. حاول النقر العادي أولاً
            element.click();
        } catch (Exception e1) {
            // 3. إذا فشل النقر العادي (مثلاً: عنصر آخر يغطيه)
            System.out.println("WARN: Regular click failed for [" + selector + "]. Retrying with JavaScript click.");
            try {
                // 4. حاول النقر باستخدام JavaScript
                WebElement element = driver.findElement(selector); // (يكفي أن يكون موجوداً)
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
            } catch (Exception e2) {
                // 5. إذا فشل كلاهما، افشل الاختبار
                System.out.println("ERROR: Both regular and JS click failed for [" + selector + "]");
                throw new RuntimeException("Failed to click element: " + selector, e2);
            }
        }
    }
}
