package com.mycompany.selenium_automation_project.base;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import com.google.common.io.Files;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.qameta.allure.Allure;

public class BaseTest {
    protected WebDriver driver;
    protected WebDriverWait wait;
    protected String baseUrl;
    
    @BeforeMethod
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        baseUrl = "https://www.saucedemo.com/";
//        wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        // 1) إعداد الخيارات
        ChromeOptions options = new ChromeOptions();

        Map<String, Object> prefs = new HashMap<>();
        prefs.put("credentials_enable_service", false);              //Stop password service
        prefs.put("profile.password_manager_enabled", false);        // Stop saving passwords
        prefs.put("profile.password_manager_leak_detection", false); // Stop leak warnings
        prefs.put("autofill.profile_enabled", false);                // stop Autofill
        prefs.put("autofill.credit_card_enabled", false);            // stop Autofill cards
        options.setExperimentalOption("prefs", prefs);

        // 2) additional 
        options.addArguments("--disable-save-password-bubble");
        options.addArguments("--disable-notifications");
        options.addArguments("--incognito");         // optional
        options.addArguments("--start-maximized");

        // 3) Create a WebDriver with options only (once!)
        driver = new ChromeDriver(options);
        driver.manage().deleteAllCookies();
        driver.manage().window().maximize();

        // 4) WebDriverWait بالـ DEFAULT_TIMEOUT
        wait = new WebDriverWait(driver, Duration.ofSeconds(20));
    }

    @AfterMethod(alwaysRun = true)
    public void tearDown(ITestResult result) {
        if (driver != null) {
            try {
                if (result.getStatus() == ITestResult.FAILURE) {
                    attachScreenshot("❌ Failure Screenshot");
                    Allure.addAttachment("URL", driver.getCurrentUrl());
                }
            } finally {
                driver.quit();
            }
        }
    }
    
    @@BeforeSuite(alwaysRun = true)
    public void writeAllureEnvironment() throws IOException {
        // Where Allure will look for results. Falls back to target/allure-results.
        String dir = System.getProperty("allure.results.directory", "target/allure-results");

        // Create the directory if it doesn't exist (java.nio API)
        Path resultsDir = Paths.get(dir);
        Files.createDirectories(resultsDir);

        // Prepare environment info
        Properties p = new Properties();
        p.setProperty("Browser", "Chrome 128");
        p.setProperty("OS", "Windows 11");
        p.setProperty("BaseURL", baseUrl);
        p.setProperty("Environment", "QA");
        p.setProperty("Tester", "Heba AL-Rubaye");

        // Write environment.properties for Allure
        Path envFile = resultsDir.resolve("environment.properties");
        try (OutputStream out = Files.newOutputStream(envFile)) {
            p.store(out, "Allure environment");
        }
    }
    private void attachScreenshot(String name) {
        byte[] png = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
        Allure.addAttachment(name, new ByteArrayInputStream(png));
    }

    public WebDriver getDriver() { return driver; } 
    
    static {
        System.setProperty("allure.results.directory", "target/allure-results");
    }

}
